// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown list
function getProductionListsIPC(jwtToken) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return { result: verifyToken };
  } else {
    const ssMain = SpreadsheetApp.getActiveSpreadsheet();
    const shTabetLists = ssMain.getSheetByName(globalVariables().shTabetLists);
    const shProductionLists = ssMain.getSheetByName(globalVariables().shProductionLists);
    const tabetLists = shTabetLists.getDataRange().getDisplayValues().slice(1);
    const productionLists = shProductionLists.getDataRange().getDisplayValues().slice(1);

    let sheetListsIPC = [];

    if (verifyToken.userData.role != "Operator") {
      productionLists.forEach(([filename, type, sheetUrl, slidUrl])=> {
        if(type === "IPC") {
          sheetListsIPC.push({
            name: filename.toUpperCase(),
            url: sheetUrl,
            pdf: slidUrl.replace("edit?usp=drivesdk", "preview"),
          });
        }
      });

    }

    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    sheetListsIPC = sheetListsIPC.sort((item1, item2) => {
      const date1Parts = item1.name.split("_").pop().split("/");
      const date2Parts = item2.name.split("_").pop().split("/");
      const date1 = new Date(
        `${date1Parts[2]}-${date1Parts[1]}-${date1Parts[0]}`
      );
      const date2 = new Date(
        `${date2Parts[2]}-${date2Parts[1]}-${date2Parts[0]}`
      );
      return date1 - date2;
    });

    tabetLists.reverse().forEach((data) => {
      const tablet_name = data[0].toUpperCase();
      const tablet_url_ipc = data[4];
      sheetListsIPC.push({
        name: `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å ${tablet_name} (LOT. ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)`,
        url: tablet_url_ipc,
        pdf: null,
      });
    });

    return { result: verifyToken, productionLists: sheetListsIPC };
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å URL
function getWeighingDataIPC({ url, jwtToken }) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return { result: verifyToken };
  } else {
    const spreadsheet = SpreadsheetApp.openByUrl(url); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Spreadsheet
    const data_setting = spreadsheet
      .getSheetByName(globalVariables().shSetWeight) // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(1); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    const data_weighing = spreadsheet
      .getSheetByName(globalVariables().shWeightIPC) // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet ‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(1); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    const data_remarks = spreadsheet
      .getSheetByName(globalVariables().shRemarks) // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet remarks
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(1); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
    const settingDetail = {
      productName: data_setting[0][1], // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      lot: data_setting[1][1], // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï
      balanceID: data_setting[2][1], // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á
      tabletID: data_setting[3][1], // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å
      numberPunches: data_setting[4][1], // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏Å
      numberTablets: data_setting[5][1], // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡πá‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á
      meanWeight: data_setting[6][1], // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏§‡∏©‡∏é‡∏µ
      percentWeightVariation: data_setting[7][1], // ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô
      meanWeightAvgMin: data_setting[8][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö(Min.)
      meanWeightAvgMax: data_setting[9][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö(Max.)
      meanWeightInhouseMin: data_setting[10][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Min.)
      meanWeightInhouseMax: data_setting[11][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Max.)
      meanWeightRegMin: data_setting[12][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Min.)
      meanWeightRegMax: data_setting[13][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Max.)
      prepared: data_setting[14][1], // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏î‡∏¢
      approved: data_setting[15][1], // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢
      finished: data_setting[16][1], // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÇ‡∏î‡∏¢
      finishTime: data_setting[17][1], // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
    };

    let weighingData = []; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö object
    data_weighing.forEach((item, index) => {
      if (index % 2 === 0) {
        let rowData = {
          datetime: item[0], // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤
          operator: item[1], // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏é‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
          type: item[2], // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          characteristics: item[3], // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏°‡πá‡∏î‡∏¢‡∏≤
          weights: [],
        };

        const slice_num = 5; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô index ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å
        const weightValues = item.slice(slice_num); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å 5 ‡∏Ñ‡∏•‡∏≠‡∏•‡∏±‡πà‡∏°

        weightValues.forEach((timestamp, idx) => {
          const weight = data_weighing[index + 1][idx + slice_num];
          if (timestamp) {
            rowData["weights"].push({
              timestamp: timestamp,
              weight: weight,
            });
          }
        });

        weighingData.push(rowData);
      }
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ remarks
    let remarksData = [];
    data_remarks.forEach((row) => {
      const rowData = {
        timestamp: row[0],
        issues: row[1],
        cause: row[2],
        resolve: row[3],
        recorder: row[4],
        role: row[5],
      };

      // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡πà‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô dataObj
      remarksData.push(rowData);
    });

    const dataset = {
      settingDetail: settingDetail,
      weighingData: weighingData.reverse(),
      remarksData: remarksData.reverse(),
    };

    return { result: verifyToken, dataset: dataset };
  }
}

// ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
function signInToCheckTheSettingsIPC({ url, jwtToken }) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return { result: verifyToken };
  } else {
    const spreadsheet = SpreadsheetApp.openByUrl(url);
    const sheet = spreadsheet.getSheetByName(globalVariables().shSetWeight); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
    const data_setting = sheet
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(1); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    // ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    sheet
      .getRange(globalVariables().approvedRangeIPC)
      .setValue(verifyToken.userData.nameTH);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
    const settingDetail = {
      productName: data_setting[0][1], // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      lot: data_setting[1][1], // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï
      tabletID: data_setting[3][1], // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
    const details = `‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á IPC\
                    \n‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ ${settingDetail.productName}\
                    \n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï ${settingDetail.lot}\
                    \n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å ${settingDetail.tabletID}`;

    recordAuditTrailData({
      list: "‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      details: details,
      username: verifyToken.userData.nameTH,
      role: verifyToken.userData.role,
    });

    const timestamp = new Date().toLocaleString("en-GB", {
      timeZone: "Asia/Bangkok",
    });
    const approval_msg = `üåà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á IPC\
                        \nüî∞‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ ${settingDetail.productName}\
                        \nüî∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï ${settingDetail.lot}\
                        \nüî∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å ${settingDetail.tabletID}\n
                        \n‚™º ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢\
                        \n‚™º ‡∏Ñ‡∏∏‡∏ì ${verifyToken.userData.nameTH}\
                        \n‚™º ${timestamp}`;

    sendLineNotify(approval_msg, globalVariables().approvalToken);
    return { result: verifyToken };
  }
}

// ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
function endOfProductionIPC({ url, jwtToken }) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return { result: verifyToken };
  } else {
    const today = new Date().toLocaleString("en-GB", {
      timeZone: "Asia/Bangkok",
    });
    const date = new Date().toLocaleDateString("en-GB", {
      timeZone: "Asia/Bangkok",
    });

    const spreadsheet = SpreadsheetApp.openByUrl(url);
    const shSetWeight = spreadsheet.getSheetByName(
      globalVariables().shSetWeight
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠,‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ß‡∏•‡∏≤ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
    shSetWeight
      .getRange(globalVariables().finishedIPC)
      .setValue(verifyToken.userData.nameTH);
    shSetWeight.getRange(globalVariables().finishTimeIPC).setValue(today);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
    const productName = shSetWeight
      .getRange(globalVariables().finishRangesIPC.productname)
      .getDisplayValue();
    const lot = shSetWeight
      .getRange(globalVariables().finishRangesIPC.lot)
      .getDisplayValue();
    const tabletID = shSetWeight
      .getRange(globalVariables().finishRangesIPC.tabletID)
      .getDisplayValue();

    const details = `‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á: IPC\
                \n‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤: ${productName}\
                \n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï: ${lot}\
                \n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å: ${tabletID}`;

    recordAuditTrailData({
      list: "‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï",
      details: details,
      username: verifyToken.userData.nameTH,
      role: verifyToken.userData.role,
    });

    // ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
    const folder = DriveApp.getFolderById(globalVariables().folderIdIPC);
    const newSh = spreadsheet.copy(`${lot}_${productName}_${tabletID}_${date}`);
    const shUrl = newSh.getUrl(); // get newSheetID
    const shID = newSh.getId(); // get newSheetID
    const file = DriveApp.getFileById(shID);

    folder.addFile(file); // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ü‡πâ‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ï‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    spreadsheet
      .getSheetByName(globalVariables().shWeightIPC)
      .getRange(globalVariables().finishRangesIPC.clearRanges.weighing)
      .clearContent();
    spreadsheet
      .getSheetByName(globalVariables().shRemarks)
      .getRange(globalVariables().finishRangesIPC.clearRanges.remarks)
      .clearContent();
    spreadsheet
      .getSheetByName(globalVariables().shSetWeight)
      .getRange(globalVariables().setupRangeIPC)
      .setValue(globalVariables().finishRangesIPC.clearRanges.settingText);

    return { result: verifyToken, urlCreatePDF: shUrl };
  }
}


// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå slide,pdf
function createPdfIPC({ url, jwtToken }) {
  const getData = getWeighingDataIPC({ url: url, jwtToken: jwtToken });
  if (getData.result.message != "success") {
    return { result: getData.result };
  }
  else {
    const settingDetail = getData.dataset.settingDetail;
    const weighingData = getData.dataset.weighingData.reverse();
    const remarksData = getData.dataset.remarksData.reverse();

    const slideFolder = DriveApp.getFolderById(globalVariables().slideFolderIdIPC); // folder Slide
    const slideTemplate = DriveApp.getFileById(globalVariables().slideTemplateIdIPC); // Templete SlideID
    const newSlideCopy = slideTemplate.makeCopy(slideFolder);
    const today = new Date().toLocaleDateString("en-GB", {
      timeZone: "Asia/Bangkok",
    });
    newSlideCopy.setName(
      [settingDetail.lot, settingDetail.productName, today].join("_")
    );

    const newSlide = SlidesApp.openById(newSlideCopy.getId());

    const slides = newSlide.getSlides();
    const detailSlide = slides[0];
    const remarksSlide = slides[1];
    const weighingSlide = slides[2];

    newSlide.replaceAllText("{productname}", settingDetail.productName);
    newSlide.replaceAllText("{lot}", settingDetail.lot);
    newSlide.replaceAllText("{balanceID}", settingDetail.balanceID);
    newSlide.replaceAllText("{tabletID}", settingDetail.tabletID);
    newSlide.replaceAllText("{punches}", settingDetail.numberPunches);
    newSlide.replaceAllText("{numtablets}", settingDetail.numberTablets);
    newSlide.replaceAllText("{meanWeight}", settingDetail.meanWeight);
    newSlide.replaceAllText("{percent}", settingDetail.percentWeightVariation);
    newSlide.replaceAllText("{AVGmin}", settingDetail.meanWeightAvgMin);
    newSlide.replaceAllText("{AVGmax}", settingDetail.meanWeightAvgMax);
    newSlide.replaceAllText("{IHmin}", settingDetail.meanWeightInhouseMin);
    newSlide.replaceAllText("{IHmax}", settingDetail.meanWeightInhouseMax);
    newSlide.replaceAllText("{REGmin}", settingDetail.meanWeightRegMin);
    newSlide.replaceAllText("{REGmax}", settingDetail.meanWeightRegMax);
    newSlide.replaceAllText("{prepared}", settingDetail.prepared);
    newSlide.replaceAllText("{approved}", settingDetail.approved);
    newSlide.replaceAllText("{finished}", settingDetail.finished);
    newSlide.replaceAllText("{finishTime}", settingDetail.finishTime);

    const remarksTable = remarksSlide.getTables()[0];
    remarksData.forEach((dataRow, index) => {
      if (index > 0 && remarksTable.getNumRows() - 1 < remarksData.length) {
        remarksTable.appendRow();
      }

      const row = index + 1;
      remarksTable.getRow(row).getCell(0).getText().setText(dataRow.timestamp);
      remarksTable.getRow(row).getCell(1).getText().setText(dataRow.issues);
      remarksTable.getRow(row).getCell(2).getText().setText(dataRow.cause);
      remarksTable.getRow(row).getCell(3).getText().setText(dataRow.resolve);
      remarksTable.getRow(row).getCell(4).getText().setText(dataRow.recorder);
      remarksTable.getRow(row).getCell(5).getText().setText(dataRow.role);
    });

    const numTable = 4;
    const totalPages = Math.ceil(weighingData.length / numTable);
    let totalWeight = [];
    let sumTotalWeight = 0;

    for (let i = 0; i < totalPages; i++) {
      let slide;
      if (i == totalPages - 1) {
        slide = weighingSlide;
      } else {
        slide = weighingSlide.duplicate();
      }

      slide.move(newSlide.getSlides().length);
      for (let ix = 0; ix < numTable; ix++) {
        const dataLength = (numTable * i) + ix;
        if (dataLength < weighingData.length) {
          const dataset = weighingData[dataLength];
          let _timestamp = [];
          let _weights = [];
          let sumWeight = 0;
          dataset.weights.forEach((data) => {
            _timestamp.push(data.timestamp);
            _weights.push(data.weight);
            sumWeight += parseFloat(data.weight);

            if (
              parseFloat(data.weight) >=
              parseFloat(settingDetail.meanWeightRegMin) &&
              parseFloat(data.weight) <=
              parseFloat(settingDetail.meanWeightRegMax)
            ) {
              sumTotalWeight += parseFloat(data.weight);
              totalWeight.push(parseFloat(data.weight));
            }
          });

          const timestamp = _timestamp.join("\n");
          const weights = _weights.join("\n");
          const min = Math.min(..._weights).toFixed(3);
          const max = Math.max(..._weights).toFixed(3);
          const average = (sumWeight / dataset.weights.length).toFixed(3);

          const table = slide.getTables()[ix];
          const datetimeCell = table.getRow(0).getCell(0);
          const timestampCell = table.getRow(2).getCell(0);
          const weightCell = table.getRow(2).getCell(1);
          const averageCell = table.getRow(3).getCell(1);
          const minCell = table.getRow(5).getCell(0);
          const maxCell = table.getRow(5).getCell(1);
          const characteristicsCell = table.getRow(6).getCell(1);
          const operatorCell = table.getRow(7).getCell(1);

          datetimeCell.getText().setText(dataset.datetime);
          timestampCell.getText().setText(timestamp);
          weightCell.getText().setText(weights);
          averageCell.getText().setText(average);
          minCell.getText().setText(min);
          maxCell.getText().setText(max);
          characteristicsCell.getText().setText(dataset.characteristics);
          operatorCell.getText().setText(dataset.operator);

          if (dataLength == 0) {
            detailSlide.replaceAllText("{startTime}", dataset.datetime);
          }
        }
        else {
          break;
        }
      }
    }

    detailSlide.replaceAllText("{summin}", Math.min(...totalWeight).toFixed(3));
    detailSlide.replaceAllText("{summax}", Math.max(...totalWeight).toFixed(3));
    detailSlide.replaceAllText(
      "{sumavg}",
      (sumTotalWeight / totalWeight.length).toFixed(3)
    );

    const mainSpreadSheet = SpreadsheetApp.getActiveSpreadsheet();
    const mainProductionLists = mainSpreadSheet.getSheetByName(
      globalVariables().shProductionLists
    );
    mainProductionLists.appendRow([
      SpreadsheetApp.openByUrl(url).getName(),
      "IPC",
      url,
      newSlideCopy.getUrl(),
    ]);

    return { result: getData.result };
  }
}
